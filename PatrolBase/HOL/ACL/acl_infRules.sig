(* File: acl_infRules.sig created 2/19/2009 *)(* Author: Shiu-Kai Chin, skchin@syr.edu *)signature acl_infRules =sigtype tactic = Abbrev.tactic;type thm_tactic = Abbrev.thm_tactic;type conv = Abbrev.conv;type thm = Thm.thm;type term = Term.term;val ACL_TAUT_TAC : tactic;val ACL_TAUT : term -> thm;val ACL_ASSUM : term -> thm;val ACL_ASSUM2 : term -> term -> term -> thm;val ACL_MP : thm -> thm -> thm;val ACL_MT : thm -> thm -> thmval ACL_SIMP1 : thm -> thm;val ACL_SIMP2 : thm -> thm;val ACL_CONJ : thm -> thm -> thm;val ACL_DISJ1 : term -> thm -> thm;val ACL_DISJ2 : term -> thm -> thm;val CONTROLS : thm -> thm -> thm;val REPS : thm -> thm -> thm -> thm;val REP_SAYS : thm -> thm -> thm;val ACL_DN : thm -> thm;val SAYS : term -> thm -> thm;val MP_SAYS : term -> term -> term -> thm;val SPEAKS_FOR : thm -> thm -> thm;val HS : thm -> thm -> thm;val DC : thm -> thm -> thm;val SAYS_SIMP1 : thm -> thm;val SAYS_SIMP2 : thm -> thm;val DOMI_TRANS : thm -> thm -> thm;val DOMS_TRANS : thm -> thm -> thm;val IL_DOMI : thm -> thm -> thm -> thm;val SL_DOMS : thm -> thm -> thm -> thm;val QUOTING_RL : thm -> thm;val QUOTING_LR : thm -> thm;val EQN_LTE : thm -> thm -> thm -> thm;val EQN_LT : thm -> thm -> thm -> thm;val EQN_EQN : thm -> thm -> thm -> thm;val AND_SAYS_RL : thm -> thm;val AND_SAYS_LR : thm -> thm;val IDEMP_SPEAKS_FOR : term -> thm;val MONO_SPEAKS_FOR : thm -> thm -> thm;val TRANS_SPEAKS_FOR : thm -> thm -> thm;val EQF_ANDF1 : thm -> thm -> thmval EQF_ANDF2 : thm -> thm -> thmval EQF_CONTROLS : thm -> thm -> thmval EQF_EQF1 : thm -> thm -> thmval EQF_EQF2 : thm -> thm -> thmval EQF_IMPF1 : thm -> thm -> thmval EQF_IMPF2 : thm -> thm -> thmval EQF_NOTF : thm -> thm -> thmval EQF_ORF1 : thm -> thm -> thmval EQF_ORF2 : thm -> thm -> thmval EQF_REPS : thm -> thm -> thmval EQF_SAYS : thm -> thm -> thmval ACL_CONJ_TAC : 'a * term -> ('a * term) list * (thm list -> thm)val ACL_DISJ1_TAC : 'a * term -> ('a * term) list * (thm list -> thm)val ACL_DISJ2_TAC : 'a * term -> ('a * term) list * (thm list -> thm)val ACL_MP_TAC : thm -> 'a * term -> ('a * term) list * (thm list -> thm)val ACL_AND_SAYS_RL_TAC : 'a * term -> ('a * term) list * (thm list -> thm)val ACL_AND_SAYS_LR_TAC : 'a * term -> ('a * term) list * (thm list -> thm)val ACL_CONTROLS_TAC : term -> 'a * term -> ('a * term) list * (thm list -> thm)val ACL_DC_TAC : term -> 'a * term -> ('a * term) list * (thm list -> thm)val ACL_DOMI_TRANS_TAC : term -> 'a * term -> ('a * term) list * (thm list -> thm)val ACL_DOMS_TRANS_TAC : term -> 'a * term -> ('a * term) list * (thm list -> thm)val ACL_HS_TAC : term -> 'a * term -> ('a * term) list * (thm list -> thm)val ACL_IDEMP_SPEAKS_FOR_TAC : 'a * term -> 'b list * ('c -> thm)val ACL_IL_DOMI_TAC : term -> term -> 'a * term -> ('a * term) list * (thm list -> thm)val ACL_MONO_SPEAKS_FOR_TAC : 'a * term -> ('a * term) list * (thm list -> thm)val ACL_MP_SAYS_TAC : 'a * term -> 'b list * ('c -> thm)val ACL_QUOTING_LR_TAC : 'a * term -> ('a * term) list * (thm list -> thm)val ACL_QUOTING_RL_TAC : 'a * term -> ('a * term) list * (thm list -> thm)val ACL_REPS_TAC : term -> term -> 'a * term -> ('a * term) list * (thm list -> thm)val ACL_REP_SAYS_TAC : term -> 'a * term -> ('a * term) list * (thm list -> thm)val ACL_SAYS_TAC : 'a * term -> ('a * term) list * (thm list -> thm)val ACL_SPEAKS_FOR_TAC : term -> 'a * term -> ('a * term) list * (thm list -> thm)val ACL_TRANS_SPEAKS_FOR_TAC : term -> 'a * term -> ('a * term) list * (thm list -> thm)end;